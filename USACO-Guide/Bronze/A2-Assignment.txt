TASK 2.1 

NabilNadian,HEX 04E 
		 HEX 041
		 HEX 042 
		 HEX 049
		 HEX 04C 
		 HEX 04E
		 HEX 041 
		 HEX 044 
		 HEX 049 
		 HEX 041 
		 HEX 04E  




Task 2.2

ORG 100
loop,	LoadI	   CurrentCharacterLocation	/ Load the character found at address chptr.
	Skipcond   400		/ If the character is a null, we are done.
	Jump	   PrintCharactersRemaining		/ Otherwise, proceed with operation.
	Halt
PrintCharactersRemaining,	Output			/ Output the character.
	Load	   CurrentCharacterLocation	/ Move pointer to next character.
	Add	   One		
	Store	   CurrentCharacterLocation
	Jump	   loop
One,	Hex	0001
CurrentCharacterLocation, Hex 10B
NabilNadian, HEX 04E 
		 HEX 041
		 HEX 042 
		 HEX 049
		 HEX 04C 
		 HEX 04E
		 HEX 041 
		 HEX 044 
		 HEX 049 
		 HEX 041 
		 HEX 04E  


Task 2.3

// Registers
InitialAddress,Hex     0000    // Initial Address
Character, Hex     0000    // Character


// Main Program
Load    PrintFrom        // Load the initial address of the string
Jump    PrintStringSub   // Call the subroutine to print the string
Halt                    

// Subroutine: Print String
PrintStringSub, LoadI   PrintFrom   // Load the value stored in the PrintFrom register
		Store   Character        // Store the character in the Character register
		Load    Null             // Load the Null character (end of the string)
		Subt    Character        // Compare the Character with Null character
		Skipcond 000             // If Character is Null, skip the next instruction
		Jump    PrintEnd         // Jump to PrintEnd if the string has ended
	    Load    Character        // Load the Character
	   Output                  
       Load    PrintFrom        // Load the PrintFrom address
       Add     one              // Increment the address by 1
       Store   PrintFrom        // Store the incremented address in the PrintFrom register
        Jump    PrintStringSub   // Repeat the subroutine for the n text character

PrintEnd, JnS   PrintReturn  // Return to the calling address

NabilNadian,HEX 04E 
		 HEX 041
		 HEX 042 
		 HEX 049
		 HEX 04C 
		 HEX 04E
		 HEX 041 
		 HEX 044 
		 HEX 049 
		 HEX 041 
		 HEX 04E  
// Constants
one,     Dec     1
Null,    Dec     0
PrintFrom, Hex 0100 // Address of the string
PrintReturn, Hex 0000


2.4

Load StringAddr2 
Store CurrentCharacterLocation 
Jns InputStringStart 
Halt

CurrentCharacterLocation, HEX 0
InputStringStart, HEX 0
	Input
	Store Print_Char
	load CurrentCharacterLocation
    Add one
    store CurrentCharacterLocation
	Skipcond 400
	JnS  Print
	Halt

Print_Char, DEC 0
Print, HEX 0
Load Print_Char
Output
Skipcond 800
Halt

StringAddr2, JnS UserInput
UserInput,  HEX 0
one, dec 1


TASK 2.5
This program presents a simple toupper(ptr) function.
Sets the argument `str_ptr` for the toupper function.
Calls the toupper function.
Subs the offset between upper and lower case letters on ascii table.
0x61 ('a') 0x41 ('A') --> 0x20

		
			LOAD		str_ptr
			STORE		toupper_ptr
			JNS		toupper
			HALT
			
toupper_itr,		DEC		0
toupper_ptr,		HEX		0
toupper_idx,		HEX		0
toupper_offset,		HEX		20	
toupper,		HEX		0
toupper_while,		LOAD		toupper_ptr
			ADD		toupper_itr
			STORE		toupper_idx
			CLEAR
			ADDI		toupper_idx
			SKIPCOND	400
			JUMP		toupper_do
			JUMPI		toupper

toupper_do,		SUBT 		toupper_offset
			OUTPUT
			LOAD		toupper_itr
			ADD 		ONE
			STORE		toupper_itr
			JUMP		toupper_while

str_ptr,		HEX		18			/ memory location of str
str,			HEX		68			/ H
			HEX		65			/ E
			HEX		6C			/ L
			HEX		6C			/ L
			HEX		6F			/ O
			HEX		D			/ carriage return
			HEX		77			/ W
			HEX		6F			/ O
			HEX		72			/ R
			HEX		6C			/ L
			HEX		64			/ D
			HEX		0			/ NULL char

/ constants
ONE,				DEC		1


TASK 2.6


//Alternate
Load StringAddr2 
Store CurrentCharacterLocation 
Jns InputStringStart 
Halt

CurrentCharacterLocation, HEX 0
InputStringStart, HEX 0
	Input
	Store Print_Char
	load CurrentCharacterLocation
    Add one
    store CurrentCharacterLocation
	Skipcond 400
	JnS  Print
	Halt

Print_Char, DEC 0
Print, HEX 0
Load Print_Char
Add val13
Output
Skipcond 800
Halt

StringAddr2, JnS UserInput
UserInput,  HEX 0
one, dec 1
val13, dec 13









/// Input characters, transform, and store in memory until '.' is input
/ -----
Load Start / Initialize character pointer to start of block
Store Ptr
GetVal, Input /Take the input value
Subt ChPe / subroutine '.' (2E)
Skipcond 800 / AC will be 00, if the input is '.'
/jump Print we're done entering, now go print
input / get next array element

/>>>>> Add code to accomplish the input and output phases. <<<<<

/>>>>> Here's an example of how subroutine ROT13 is called. <<<<<
/>>>>> We'll just transform 'A' in this example then halt. Load ChA / Put 'A' in AC
Store InVal / Store value to be transformed into InVal
Jns ROT13 / Jump to the ROT13 subroutine
/ Upon return, the transformed character is in AC
storeI Ptr / store in arr[index]
load Ptr / Ptr++
add Incr
store Ptr
load Index / Index++
add Incr
store Index
jump GetVal / return to loop tes
Halt
Print, load Arr / copy array address
load Arr
store Ptr
clear / Index = 0
store Index
PrtVal, loadI Ptr / get/print next element from arr[index]
output
load Ptr / Ptr++
add Incr
store Ptr
load Index / Index++
add Incr
store Index
Jump PrtVal / return to loop test

/ -----
/ Rotate-13 subroutine: Apply ROT13 to input character in location InVal and return in AC
/ -----

/>>>>> WARNING: This subroutine almost works. need to fix a bug.

ROT13, HEX 0
Load InVal / Get character
Add Val13 / Add 13
Store Hold / Save it
Subt ChZ / Check if modulo adjust is needed (past 'Z')
Skipcond 800 / No adjust needed if past 'Z'
Jump NoAdj
Add ChA / Add 'A' back to difference to perform modulo
Jump Done / Result is in AC

NoAdj, Load Hold / No adjust needed, get result

Done, Jump ROT13 / Return with result in AC

/ -----
/ Constants (the program should not write to these locations)
/ -----
ChA, HEX 0041 / Constant value 'A' for modulo adjust in subroutine
ChZ, HEX 005A / Constant value 'Z' for modulo check in subroutine
ChPe, HEX 2E / Constant period character that marks end of input
Val13, DEC 13 / Constant rotate value of 13 for subroutine
One, HEX 1 / Constant value 1
Start, HEX 200 / Constant address for start of character block

/ -----
/ Data area (these locations are for reading and writing)
/ -----
InVal, HEX 0 / subroutine for subroutine input value
Hold, HEX 0 / Reserved for temporary variable for subroutine
Ptr, HEX 0 / Reserved for character pointer
Index, hex 0 / current array index
Element, hex 0 / value of current array element
Incr, hex 1 / for ++
Arr, hex 28 / address for start of the array storage